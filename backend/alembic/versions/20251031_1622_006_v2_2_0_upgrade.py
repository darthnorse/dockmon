"""v2.2.0 upgrade - Agent infrastructure for remote Docker host monitoring

Revision ID: 006_v2_2_0
Revises: 005_v2_1_0
Create Date: 2025-10-31

CHANGES IN v2.2.0:
- Create registration_tokens table (agent registration system)
  - Single-use tokens with 15-minute expiry
  - Tracks which user created token and when used
  - Enables secure agent registration without exposing credentials
- Create agents table (agent lifecycle management)
  - Stores agent registration info (engine_id, version, capabilities)
  - 1:1 relationship with docker_hosts via foreign key
  - Unique constraint on engine_id (prevents duplicate registrations)
  - Status tracking (online/offline/degraded)
  - JSON capabilities field for feature flags
- Add connection_type column to docker_hosts
  - Values: 'local', 'mtls', 'agent'
  - Differentiates connection methods for hosts
- Add indexes for performance (engine_id, host_id, status)
- Update app_version to '2.2.0'

NEW FEATURES:
- Agent registration via time-limited tokens
- WebSocket-based agent communication
- Remote Docker host monitoring without direct Docker socket access
- Agent-based container updates (network resilient)
- Agent self-update capability
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision = '006_v2_2_0'
down_revision = '005_v2_1_0'
branch_labels = None
depends_on = None


def column_exists(table_name: str, column_name: str) -> bool:
    """Check if column exists (defensive pattern)"""
    bind = op.get_bind()
    inspector = inspect(bind)
    if table_name not in inspector.get_table_names():
        return False
    columns = [col['name'] for col in inspector.get_columns(table_name)]
    return column_name in columns


def table_exists(table_name: str) -> bool:
    """Check if table exists (defensive pattern)"""
    bind = op.get_bind()
    inspector = inspect(bind)
    return table_name in inspector.get_table_names()


def index_exists(table_name: str, index_name: str) -> bool:
    """Check if index exists (defensive pattern)"""
    bind = op.get_bind()
    inspector = inspect(bind)
    if table_name not in inspector.get_table_names():
        return False
    indexes = [idx['name'] for idx in inspector.get_indexes(table_name)]
    return index_name in indexes


def upgrade() -> None:
    """Add v2.2.0 agent infrastructure"""

    # Change 1: Create registration_tokens table
    # Tracks single-use tokens for agent registration with 15-minute expiry
    if not table_exists('registration_tokens'):
        op.create_table(
            'registration_tokens',
            sa.Column('id', sa.Integer(), primary_key=True, autoincrement=True),
            sa.Column('token', sa.String(), nullable=False, unique=True),  # UUID format
            sa.Column('created_by_user_id', sa.Integer(), sa.ForeignKey('users.id', ondelete='CASCADE'), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.Column('expires_at', sa.DateTime(), nullable=False),  # 15 minute expiry
            sa.Column('used', sa.Boolean(), server_default='0', nullable=False),
            sa.Column('used_at', sa.DateTime(), nullable=True),
            sqlite_autoincrement=True,
        )

        # Add indexes for performance
        if not index_exists('registration_tokens', 'idx_registration_token_token'):
            op.create_index('idx_registration_token_token', 'registration_tokens', ['token'])
        if not index_exists('registration_tokens', 'idx_registration_token_user'):
            op.create_index('idx_registration_token_user', 'registration_tokens', ['created_by_user_id'])
        if not index_exists('registration_tokens', 'idx_registration_token_expires'):
            op.create_index('idx_registration_token_expires', 'registration_tokens', ['expires_at'])

    # Change 2: Create agents table
    # Stores agent registration info and lifecycle management
    if not table_exists('agents'):
        op.create_table(
            'agents',
            sa.Column('id', sa.String(), primary_key=True),  # UUID generated by backend
            sa.Column('host_id', sa.String(), sa.ForeignKey('docker_hosts.id', ondelete='CASCADE'), nullable=False, unique=True),
            sa.Column('engine_id', sa.String(), nullable=False, unique=True),  # Docker engine ID
            sa.Column('version', sa.String(), nullable=False),  # Agent version (e.g., '2.2.0')
            sa.Column('proto_version', sa.String(), nullable=False),  # Protocol version (e.g., '1.0')
            sa.Column('capabilities', sa.Text(), nullable=False),  # JSON: {"stats_collection": true, ...}
            sa.Column('status', sa.String(), nullable=False),  # 'online', 'offline', 'degraded'
            sa.Column('last_seen_at', sa.DateTime(), nullable=False),
            sa.Column('registered_at', sa.DateTime(), nullable=False),
            sqlite_autoincrement=False,
        )

        # Add indexes for performance
        if not index_exists('agents', 'idx_agent_host_id'):
            op.create_index('idx_agent_host_id', 'agents', ['host_id'])
        if not index_exists('agents', 'idx_agent_engine_id'):
            op.create_index('idx_agent_engine_id', 'agents', ['engine_id'])
        if not index_exists('agents', 'idx_agent_status'):
            op.create_index('idx_agent_status', 'agents', ['status'])
        if not index_exists('agents', 'idx_agent_last_seen'):
            op.create_index('idx_agent_last_seen', 'agents', ['last_seen_at'])

    # Change 3: Add connection_type column to docker_hosts
    # Differentiates: 'local' (Docker socket), 'mtls' (Docker API), 'agent' (DockMon agent)
    if table_exists('docker_hosts'):
        if not column_exists('docker_hosts', 'connection_type'):
            op.add_column('docker_hosts',
                sa.Column('connection_type', sa.String(), server_default='local', nullable=False)
            )

    # Change 4: Update app_version
    if table_exists('global_settings'):
        op.execute(
            sa.text("UPDATE global_settings SET app_version = :version WHERE id = :id")
            .bindparams(version='2.2.0', id=1)
        )


def downgrade() -> None:
    """Remove v2.2.0 agent infrastructure"""

    # Reverse order of upgrade
    if table_exists('global_settings'):
        op.execute(
            sa.text("UPDATE global_settings SET app_version = :version WHERE id = :id")
            .bindparams(version='2.1.0', id=1)
        )

    # Remove connection_type column from docker_hosts
    if table_exists('docker_hosts'):
        if column_exists('docker_hosts', 'connection_type'):
            op.drop_column('docker_hosts', 'connection_type')

    # Drop agents table
    if table_exists('agents'):
        # Drop indexes first
        if index_exists('agents', 'idx_agent_last_seen'):
            op.drop_index('idx_agent_last_seen', 'agents')
        if index_exists('agents', 'idx_agent_status'):
            op.drop_index('idx_agent_status', 'agents')
        if index_exists('agents', 'idx_agent_engine_id'):
            op.drop_index('idx_agent_engine_id', 'agents')
        if index_exists('agents', 'idx_agent_host_id'):
            op.drop_index('idx_agent_host_id', 'agents')
        # Drop table
        op.drop_table('agents')

    # Drop registration_tokens table
    if table_exists('registration_tokens'):
        # Drop indexes first
        if index_exists('registration_tokens', 'idx_registration_token_expires'):
            op.drop_index('idx_registration_token_expires', 'registration_tokens')
        if index_exists('registration_tokens', 'idx_registration_token_user'):
            op.drop_index('idx_registration_token_user', 'registration_tokens')
        if index_exists('registration_tokens', 'idx_registration_token_token'):
            op.drop_index('idx_registration_token_token', 'registration_tokens')
        # Drop table
        op.drop_table('registration_tokens')
